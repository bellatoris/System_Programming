#######################################################################
# Test for copying block of size 300;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $300, %eax		# src and dst have 300 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-1, %edx		# len -= 1
	jg Loop			# len >= 2
	je Last			# len = 1
	jl Done			# len = 0
Loop:
	mrmovl (%ebx), %esi
	mrmovl 4(%ebx), %edi
	rmmovl %esi, (%ecx)
	rmmovl %edi, 4(%ecx)
	andl %esi, %esi		# val <= 0?
	jle L1			# if then, jmp
	iaddl $1, %eax		# count++;
L1:
	andl %edi, %edi		# val <= 0?
	jle L2			# if then, jmp
	iaddl $1, %eax		# count++;
L2:
	iaddl $8, %ebx
	iaddl $8, %ecx
	iaddl $-2, %edx		
	jg Loop			# len >=2
	jl Done			# len = 0
#	je Last			# len = 1
Last:
	mrmovl (%ebx), %esi
	rmmovl %esi, (%ecx)
	andl %esi, %esi
	jle Done
	iaddl $1, %eax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %eax has 141.  Set %eax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %eax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %eax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %eax to 0xeeee if not.
# If all checks pass, then sets %eax to 0xaaaa
check:
	pushl %ebp
	rrmovl %esp,%ebp
	pushl %esi
	pushl %ebx
	pushl %edi
	# Return value test
	irmovl $141,%edx
	subl %edx,%eax
	je checkb
	irmovl $0xbbbb,%eax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovl EndFun,%eax
	irmovl StartFun,%edx
	subl %edx,%eax
	irmovl $1000,%edx
	subl %eax,%edx
	jge checkm
	irmovl $0xcccc,%eax  # Failed test #2
	jmp cdone
checkm:
	irmovl dest, %edx # Pointer to next destination location
	irmovl src,%ebx   # Pointer to next source location
	irmovl $300,%edi  # Count
	andl %edi,%edi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovl (%edx),%eax
	mrmovl (%ebx),%esi
	subl %esi,%eax
	je  mok
	irmovl $0xdddd,%eax # Failed test #3
	jmp cdone
mok:
	irmovl $4,%eax
	addl %eax,%edx	  # dest ++
	addl %eax,%ebx    # src++
	irmovl $1,%eax
	subl %eax,%edi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovl Predest,%edx
	mrmovl (%edx), %eax  # Get word before destination
	irmovl $0xbcdefa, %edx
	subl %edx,%eax
	je checkpost
	irmovl $0xeeee,%eax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovl Postdest,%edx
	mrmovl (%edx), %eax  # Get word after destination
	irmovl $0xdefabc, %edx
	subl %edx,%eax
	je checkok
	irmovl $0xeeee,%eax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovl $0xaaaa,%eax
cdone:
	popl %edi
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long 2
	.long -3
	.long 4
	.long -5
	.long 6
	.long 7
	.long -8
	.long -9
	.long 10
	.long -11
	.long -12
	.long 13
	.long -14
	.long -15
	.long 16
	.long 17
	.long 18
	.long 19
	.long -20
	.long 21
	.long 22
	.long -23
	.long -24
	.long 25
	.long -26
	.long -27
	.long 28
	.long 29
	.long -30
	.long -31
	.long -32
	.long 33
	.long 34
	.long 35
	.long 36
	.long -37
	.long 38
	.long -39
	.long -40
	.long -41
	.long -42
	.long -43
	.long -44
	.long 45
	.long -46
	.long -47
	.long -48
	.long -49
	.long 50
	.long 51
	.long 52
	.long -53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long -59
	.long -60
	.long 61
	.long -62
	.long -63
	.long -64
	.long -65
	.long 66
	.long 67
	.long 68
	.long -69
	.long -70
	.long 71
	.long -72
	.long -73
	.long -74
	.long 75
	.long -76
	.long 77
	.long 78
	.long -79
	.long -80
	.long -81
	.long -82
	.long 83
	.long -84
	.long 85
	.long 86
	.long -87
	.long 88
	.long -89
	.long 90
	.long -91
	.long 92
	.long 93
	.long 94
	.long -95
	.long -96
	.long 97
	.long -98
	.long 99
	.long 100
	.long -101
	.long -102
	.long -103
	.long 104
	.long -105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long -113
	.long -114
	.long 115
	.long -116
	.long 117
	.long -118
	.long 119
	.long 120
	.long -121
	.long 122
	.long 123
	.long -124
	.long 125
	.long -126
	.long -127
	.long 128
	.long -129
	.long -130
	.long -131
	.long 132
	.long -133
	.long -134
	.long 135
	.long 136
	.long -137
	.long -138
	.long -139
	.long 140
	.long -141
	.long 142
	.long 143
	.long -144
	.long 145
	.long 146
	.long -147
	.long -148
	.long -149
	.long 150
	.long -151
	.long 152
	.long -153
	.long 154
	.long -155
	.long 156
	.long 157
	.long 158
	.long -159
	.long -160
	.long -161
	.long -162
	.long -163
	.long -164
	.long -165
	.long -166
	.long 167
	.long -168
	.long -169
	.long 170
	.long 171
	.long -172
	.long -173
	.long -174
	.long -175
	.long -176
	.long 177
	.long 178
	.long -179
	.long -180
	.long -181
	.long -182
	.long -183
	.long -184
	.long 185
	.long 186
	.long -187
	.long 188
	.long 189
	.long 190
	.long -191
	.long -192
	.long 193
	.long -194
	.long 195
	.long 196
	.long 197
	.long -198
	.long 199
	.long 200
	.long -201
	.long -202
	.long -203
	.long -204
	.long -205
	.long 206
	.long 207
	.long 208
	.long 209
	.long -210
	.long -211
	.long -212
	.long -213
	.long -214
	.long -215
	.long 216
	.long -217
	.long 218
	.long 219
	.long -220
	.long -221
	.long -222
	.long 223
	.long -224
	.long 225
	.long 226
	.long -227
	.long 228
	.long 229
	.long -230
	.long -231
	.long 232
	.long -233
	.long 234
	.long -235
	.long -236
	.long -237
	.long 238
	.long -239
	.long 240
	.long 241
	.long 242
	.long 243
	.long -244
	.long 245
	.long -246
	.long 247
	.long -248
	.long -249
	.long 250
	.long 251
	.long -252
	.long -253
	.long 254
	.long -255
	.long 256
	.long -257
	.long 258
	.long -259
	.long 260
	.long 261
	.long -262
	.long 263
	.long 264
	.long -265
	.long 266
	.long -267
	.long 268
	.long -269
	.long -270
	.long -271
	.long -272
	.long 273
	.long -274
	.long -275
	.long 276
	.long 277
	.long 278
	.long 279
	.long -280
	.long 281
	.long 282
	.long 283
	.long 284
	.long 285
	.long 286
	.long 287
	.long -288
	.long 289
	.long 290
	.long -291
	.long 292
	.long -293
	.long -294
	.long -295
	.long -296
	.long -297
	.long -298
	.long -299
	.long -300
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
