#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# Name: 민두기
# Student ID: 2012-11598
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0
	iaddl $-5, %edx		# len -= 3
	jg Loop			# len >= 4
	jle Before_Last		# len <= 3
Loop:
	mrmovl (%ebx), %esi
	mrmovl 4(%ebx), %edi
	rmmovl %esi, (%ecx)
	rmmovl %edi, 4(%ecx)
	andl %esi, %esi		# val <= 0?
	jle L1			# if then, jmp
	iaddl $1, %eax		# count++;
L1:
	andl %edi, %edi		# val <= 0?
	jle L2			# if then, jmp
	iaddl $1, %eax		# count++;
L2:
	mrmovl 8(%ebx), %esi
	mrmovl 12(%ebx), %edi
	rmmovl %esi, 8(%ecx)
	rmmovl %edi, 12(%ecx)
	andl %esi, %esi
	jle L3
	iaddl $1, %eax
L3:
	andl %edi, %edi
	jle L4
	iaddl $1, %eax
L4:
	mrmovl 16(%ebx), %esi
	mrmovl 20(%ebx), %edi
	rmmovl %esi, 16(%ecx)
	rmmovl %edi, 20(%ecx)
	andl %esi, %esi
	jle L5
	iaddl $1, %eax
L5:
	andl %edi, %edi
	jle L6
	iaddl $1, %eax
L6:
	iaddl $24, %ebx
	iaddl $24, %ecx
	iaddl $-6, %edx
	jg Loop
Before_Last:
	iaddl $5, %edx
	je Done
Last:
	mrmovl (%ebx), %esi
	rmmovl %esi, (%ecx)
	andl %esi, %esi
	jle Last2
	iaddl $1, %eax
Last2:
	iaddl $4, %ebx
	iaddl $4, %ecx
	iaddl $-1, %edx
	jg Last
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long -2
	.long -3
	.long -4
	.long -5
	.long -6
	.long 7
	.long -8
	.long -9
	.long -10
	.long 11
	.long -12
	.long -13
	.long 14
	.long 15
	.long -16
	.long -17
	.long 18
	.long -19
	.long -20
	.long 21
	.long 22
	.long 23
	.long -24
	.long 25
	.long -26
	.long -27
	.long -28
	.long -29
	.long -30
	.long -31
	.long 32
	.long 33
	.long -34
	.long -35
	.long 36
	.long -37
	.long 38
	.long -39
	.long 40
	.long 41
	.long 42
	.long 43
	.long -44
	.long -45
	.long -46
	.long 47
	.long 48
	.long -49
	.long -50
	.long 51
	.long 52
	.long -53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
